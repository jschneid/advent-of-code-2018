=== File I/O ===

To iterate through each line of a file [day 1]:
  File.readlines('input.txt').each do |line|

To slurp each line of an entire file into an array [day 2 part 2]:
  File.readlines('input.txt')

To slurp an entire file into a string [day 8]:
  File.read('input.txt')


=== Collections ===

To get a shallow copy of a collection [day 3 part 2]:
  my_items.dup

To search a collection for something, then remove the match(es) from the collection [day 3 part 2]:
  my_items.delete_if { |item| item.id == my_match_id }

Splat operator: Shove the values from an array into the individual arguments in a method call [day 6]:
  def my_method(a, b, c) ... end
  my_array = [10, 20, 30]
  my_method(*my_array)

Shorthand syntax for .map, to retrieve a single attribute from each item [day 6]:
  my_array.map &:my_attribute

To remove all instances of a value from a collection [day 7]:
  my_items.delete(value_to_delete)

Simple stack: All collections support .push and .pop [day 8]:
  a = [1, 2, 3]
  a.push(4)   # [1, 2, 3, 4]
  a.pop  # returns 4; a is now [1, 2, 3]

Simple queue: As stack (above) but use .shift to pop the first element [day 8]:
  a = [1, 2, 3]
  a.push(4)   # [1, 2, 3, 4]
  a.shift  # returns 1; a is now [2, 3, 4]



=== 2D Arrays ===

To initialize a 2D array of size x,y with value v [day 3 part 1]:
  grid = Array.new(x) { Array.new(y, v) }


=== Hashes ===

To check if a hash has a given key [day 1]:
  my_hash.has_key?(key_to_check)
or
  my_hash.key?(key_to_check)


=== Looping ===

To loop forever (instead of while(true)) [day 1]:
  loop do

To iterate through each pair-combination of items from a collection (instead of nested looping) [day 2 part 2]:
  my_array.combination(2) do |item1, item2|

To iterate through *consecutive* pair-combinations of items from a collection [day 5 part 1]:
  my_array.each_cons(2) do |pair|
  # Do something with pair[0] and pair[1]


=== Comparisons ===

To check if an item is nil [day 4 part 1]:
  my_item.nil?

To check if an item is 0 [day 5 part 1]:
  my_item.zero?

To compare case-insensitive string equality [day 5 part 1]:
  my_string.casecmp(my_other_string).zero?


=== String Manipulation ===

To truncate a trailing newline character, if any [day 2 part 2]:
  my_line.chomp

To remove all instances of a substring from a string [day 5 part 1]:
  shortened_string = my_string.gsub(my_substring, '')

To case-insensitive remove all instances of a substring from a string [day 5 part 2]:
  shortened_string = my_string.gsub(/#{my_substring}/i, '')

To convert a string to an array (so that collection methods can be used on it) [day 5 part 1]:
  my_string.split('')
